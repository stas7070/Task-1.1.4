package jm.task.core.jdbc.dao;

import jm.task.core.jdbc.model.User;
import jm.task.core.jdbc.util.Util;

import java.sql.*;


import java.util.ArrayList;
import java.util.List;



public class UserDaoJDBCImpl implements UserDao {
    private static final String CREATE_TABLE = "CREATE TABLE IF NOT EXISTS Users " +
            "(id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, " +
            "name VARCHAR(64), " +
            "lastName VARCHAR(64), " +
            "age INTEGER)";
    private static final String DROP_TABLE = "DROP TABLE IF EXISTS Users";
    private static final String SAVE_USER = "INSERT INTO Users (name, lastname, age) VALUES(?,?,?)";
    private static final String DELETE_BY_ID = "DELETE FROM Users WHERE id = ?";
    private static final String SHOW_ALL = "SELECT * FROM Users";
    private static final String CLEAR_TABLE = "TRUNCATE TABLE Users";
    public UserDaoJDBCImpl() {

    }

    public void createUsersTable() {
        try (Connection connection = Util.getConnecctionDataBase()) {
            Statement statement = connection.createStatement();
            statement.executeUpdate(CREATE_TABLE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void dropUsersTable() {
        try (Statement statement = Util.getConnecctionDataBase().createStatement()) {
            statement.execute(DROP_TABLE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void saveUser(String name, String lastName, byte age) {
        try (PreparedStatement preparedStatement = Util.getConnecctionDataBase().prepareStatement(SAVE_USER)) {
            preparedStatement.setString(1, name);
            preparedStatement.setString(2, lastName);
            preparedStatement.setByte(3, age);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public void removeUserById(long id) {
        try (PreparedStatement preparedStatement = Util.getConnecctionDataBase().prepareStatement(DELETE_BY_ID)) {
            preparedStatement.setLong(1, id);
            preparedStatement.executeUpdate();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public List<User> getAllUsers() {
        List<User> userList = new ArrayList<>();

        try (Statement statement = Util.getConnecctionDataBase().createStatement()) {
            ResultSet resultSet = statement.executeQuery(SHOW_ALL);
            while (resultSet.next()) {
                User user = new User();
                user.setId(resultSet.getLong(1));
                user.setName(resultSet.getString(2));
                user.setLastName(resultSet.getString(3));
                user.setAge(resultSet.getByte(4));
                userList.add(user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return userList;
    }

    public void cleanUsersTable() {
        try (Statement statement = Util.getConnecctionDataBase().createStatement()) {
            statement.execute(CLEAR_TABLE);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
